package com.example.ecommerce.seguridad;


import java.util.Arrays;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;



//en request matchers autorizo todas las rutas para acceder desde el localhost:8080
@EnableWebSecurity
@Configuration
public class WebSecurityConfig {

	@Bean
	protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
	    http
	        .cors().and().csrf().disable()
	        .authorizeRequests()
	            .antMatchers("/**").permitAll()
	            .anyRequest().authenticated()
	            .and()
	        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);

	    http.addFilterAfter(new JWTAuthorizationFilter(), UsernamePasswordAuthenticationFilter.class);

	    return http.build();
	}
	
//	 @Bean
//	    protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//	        http.cors().and().csrf().disable()
//	                .addFilterAfter(new JWTAuthorizationFilter(), UsernamePasswordAuthenticationFilter.class)
//	                .authorizeHttpRequests(authorize -> authorize
//	                        .requestMatchers("*")
//	                        .permitAll()
//	                        .anyRequest().authenticated());
//	        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//	        return http.build();
//	    }

	    @Bean
	    public CorsConfigurationSource corsConfigurationSource() {
	        final CorsConfiguration configuration = new CorsConfiguration();
	        // configuration.setAllowedOrigins(Arrays.asList("*")); // Si da problemas
	        // cambiar por la siguiente linea
	        configuration.setAllowedOriginPatterns(Arrays.asList("*"));
	        configuration.setAllowCredentials(true);
	        configuration.setAllowedMethods(Arrays.asList("HEAD", "GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"));
	        configuration.setAllowedHeaders(Arrays.asList("Access-Control-Allow-Headers", "Access-Control-Allow-Origin",
	                "Access-Control-Request-Method", "Access-Control-Request-Headers", "Origin", "Cache-Control",
	                "Content-Type", "Authorization"));
	        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
	        source.registerCorsConfiguration("/**", configuration);
	        return source;
	    }
}
